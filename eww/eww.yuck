(defvar user "poyehchen")
(defpoll uptime
  :interval "30s"
  `uptime -p`)

(defwidget placeholder [text]
  (box :class "pane" text))

(defwidget user-info []
  (box
    :class "user-info"
    :orientation "v"
    :valign "center"
    :hexpand true
    :space-evenly false
    :spacing 5
    (box
      :class "username"
      :halign "start"
      user)
    (box
      :class "uptime"
      :halign "start"
      uptime)))

(defwidget user-pane []
  (box
    :class "pane-hidden"
    :orientation "h"
    :space-evenly false
    :spacing 10
    (user-info)))

;; music vars
(defvar cover-path "/home/poyehchen/placeholder.png")
(defvar is-playing false)
(defvar is-repeat false)
(defvar is-single false)
(defvar max-art-width 96)
(defvar mpd-info `["---", "---", "---"]`)

(defpoll mpd-progress
  :interval "1s"
  :initial 0
  `$SCRIPT_ROOT/mpd -s`)

(defwidget music-info []
  (box
    :class "music-info"
    :orientation "v"
    :space-evenly false
    :vexpand true
    :valign "center"
    (box
      :class "music-title"
      :halign "start"
      {mpd-info[1]})
    (box
      :class "music-artist"
      :halign "start"
      {mpd-info[0]})
    (box
      :class "music-album"
      :halign "start"
      {mpd-info[2]})))

(defwidget music-pane []
  (box
    :class "pane"
    :hexpand true
    :vexpand true
    :orientation "h"
    :space-evenly false
    (box
      :class "music-art"
      :vexpand true
      :style "background-image: url('${cover-path}'); min-width: ${max-art-width}px;")
    (box
      :orientation "v"
      :hexpand true
      :space-evenly false
      (music-info)
      (progress
        :class "music-progress"
        :orientation "h"
        :value mpd-progress))))

(defwidget music-control []
  (box
    :class "pane-hidden music-control"
    :orientation "v"
    :space-evenly false
    :spacing 5
    (button
      :class "music-control-button"
      :hexpand true
      :vexpand true
      :onclick "mpc prev"
      "󰅃")
    (button
      :class "music-control-button"
      :hexpand true
      :vexpand true
      :onclick "mpc toggle; eww update is-playing=${!is-playing}"
      { is-playing ? "󰏤" : "󰐊"})
    (button
      :class "music-control-button"
      :hexpand true
      :vexpand true
      :onclick "mpc next"
      "󰅀")))

(defwidget music-section []
  (box
    :orientation "h"
    :spacing 5
    :space-evenly false
    (music-pane)
    (music-control)))

;; system info & sliders
(defvar current-volume 0)
(defvar is-muted-volume true)
(defvar current-mic 0)
(defvar is-muted-mic true)

(defpoll current-bat
  :interval "2s"
  :initial "[0, 0]"
  `$SCRIPT_ROOT/battery`)
(defpoll cpu-user
  :interval "1s"
  :initial 0.0
  `$SCRIPT_ROOT/cpu`)
(defpoll avail-mem
  :interval "1s"
  :initial 100.0
  `$SCRIPT_ROOT/memory`)
(defpoll current-brightness
  :interval "1s"
  :initial 100
  `$SCRIPT_ROOT/brightness`)

(defwidget system-info-bar [class icon value]
  (overlay
    (progress
      :class "system-info-bar ${class}-bar"
      :orientation "v"
      :flipped true
      :halign "center"
      :value value)
    (box
      :class "system-info-icon ${class}-icon"
      :halign "center"
      :valign "end"
      icon)))

(defwidget system-info []
  (box
    :class "pane-hidden system-info"
    :orientation "h"
    :spacing 5
    (system-info-bar :class "mem" :icon "󰍛" :value avail-mem)
    (system-info-bar :class "cpu" :icon "󰘚" :value {100.0 - cpu-user})
    (system-info-bar :class "bat" :icon { current-bat[0] == 1 ? "󰚥" : "󰉁"} :value {current-bat[1]})))

(defwidget system-control-slider [class icon value ?onclick onchange]
  (box
    :orientation "h"
    :space-evenly false
    :spacing 10
    (button
      :class "system-control-button ${class}-button"
      :onclick onclick
      :valign "center"
      icon)
    (scale
      :class "system-control-slider ${class}-slider"
      :orientation "h"
      :min 0.0
      :max 100.0
      :hexpand true
      :valign "center"
      :value value
      :onchange onchange)))

(defwidget system-control []
  (box
    :orientation "v"
    :hexpand true
    :spacing 5
    (system-control-slider
      :class {is-muted-volume ? "volume-muted" : "volume"}
      :icon {is-muted-volume ? "󰸈" : "󰕾"}
      :value current-volume
      :onclick `$SCRIPT_ROOT/set-volume mute; ${EWW_CMD} update is-muted-volume=${!is-muted-volume}`
      :onchange `$SCRIPT_ROOT/set-volume {}`)
    (system-control-slider
      :class {is-muted-mic ? "mic-muted" : "mic"}
      :icon {is-muted-mic ? "󰍭" : "󰍬"}
      :value current-mic
      :onclick `$SCRIPT_ROOT/set-mic mute; ${EWW_CMD} update is-muted-mic=${!is-muted-mic}`
      :onchange `$SCRIPT_ROOT/set-mic {}`)
    (system-control-slider
      :class "brightness"
      :icon "󰃠"
      :value current-brightness
      :onchange `$SCRIPT_ROOT/set-brightness {}`)))

(defwidget system-section []
  (box
    :orientation "h"
    :space-evenly false
    :spacing 10
    (system-info)
    (system-control)))

(defwidget power-menu []
  (placeholder :text "Powermenu"))

(defwidget menu []
  (box
    :class "menu"
    :orientation "v"
    :space-evenly false
    :spacing 5
    (user-pane)
    (music-section)
    (system-section)))

(defwindow menu
  :monitor 0
  :geometry (geometry
              :x "10px"
              :y "5px"
              :width "400"
              :anchor "left top")
  :exclusive true
  :focusable false
  :stacking "overlay"
  (menu))
